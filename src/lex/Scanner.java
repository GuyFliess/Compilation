/* The following code was generated by JFlex 1.4.3 on 11/4/13 4:27 PM */

package lex;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 11/4/13 4:27 PM from the specification file
 * <tt>ICLex.lex</tt>
 */
class Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\10\1\4\1\2\1\0\1\3\1\1\16\10\4\0\1\3\1\54"+
    "\1\45\1\0\1\10\1\55\1\62\1\0\1\50\1\51\1\6\1\56"+
    "\1\67\1\53\1\52\1\5\1\14\11\15\1\0\1\66\1\57\1\60"+
    "\1\61\2\0\2\17\1\71\5\17\1\71\21\17\1\46\1\72\1\47"+
    "\1\0\1\44\1\0\1\22\1\34\1\20\1\30\1\24\1\40\1\36"+
    "\1\42\1\31\1\16\1\43\1\21\1\16\1\27\1\33\1\70\1\16"+
    "\1\35\1\23\1\26\1\37\1\32\1\41\1\25\2\16\1\64\1\63"+
    "\1\65\1\0\41\10\2\0\4\10\4\0\1\11\2\0\1\10\7\0"+
    "\1\11\4\0\1\11\5\0\27\13\1\0\7\13\30\11\1\0\10\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\2\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\2\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\2\13\1\11"+
    "\1\13\1\11\1\13\3\11\2\13\1\11\1\13\1\11\2\13\1\11"+
    "\3\13\2\11\4\13\1\11\2\13\1\11\3\13\3\11\2\13\1\11"+
    "\2\13\1\11\1\13\1\11\1\13\1\11\2\13\1\11\1\13\2\11"+
    "\1\13\1\11\2\13\1\11\3\13\1\11\1\13\1\11\2\13\2\11"+
    "\1\10\1\13\3\11\4\10\1\13\1\10\1\11\1\13\1\10\1\11"+
    "\1\13\1\10\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\2\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\2\11\1\13\1\10\1\11"+
    "\1\13\1\11\3\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\7\11\2\13\1\11\2\13\2\11\1\13\1\11\4\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\105\11\1\10\44\11"+
    "\7\10\2\11\4\0\14\10\16\0\5\11\7\0\1\10\1\0\1\10"+
    "\21\0\105\10\1\11\52\10\1\13\1\11\1\13\1\11\1\10\1\0"+
    "\1\13\1\11\2\0\4\11\10\0\1\13\1\0\3\13\1\0\1\13"+
    "\1\0\2\13\1\11\21\13\1\0\11\13\43\11\1\13\2\11\3\13"+
    "\3\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\5\11\1\13\1\11\1\0\1\13\1\11"+
    "\2\13\2\11\63\13\60\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\0\5\10"+
    "\2\0\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\2\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\2\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\11\0\46\13\2\0"+
    "\1\10\7\0\47\11\11\0\55\10\1\0\1\10\1\0\2\10\1\0"+
    "\2\10\1\0\1\10\10\0\33\10\5\0\3\10\15\0\4\10\7\0"+
    "\1\10\4\0\13\10\5\0\112\10\4\0\146\10\1\0\11\10\1\0"+
    "\12\10\1\0\23\10\2\0\1\10\17\0\74\10\2\0\145\10\16\0"+
    "\66\10\4\0\1\10\5\0\56\10\22\0\34\10\244\0\144\10\2\0"+
    "\12\10\1\0\7\10\1\0\7\10\1\0\3\10\1\0\10\10\2\0"+
    "\2\10\2\0\26\10\1\0\7\10\1\0\1\10\3\0\4\10\2\0"+
    "\11\10\2\0\2\10\2\0\4\10\10\0\1\10\4\0\2\10\1\0"+
    "\5\10\2\0\16\10\7\0\1\10\5\0\3\10\1\0\6\10\4\0"+
    "\2\10\2\0\26\10\1\0\7\10\1\0\2\10\1\0\2\10\1\0"+
    "\2\10\2\0\1\10\1\0\5\10\4\0\2\10\2\0\3\10\3\0"+
    "\1\10\7\0\4\10\1\0\1\10\7\0\20\10\13\0\3\10\1\0"+
    "\11\10\1\0\3\10\1\0\26\10\1\0\7\10\1\0\2\10\1\0"+
    "\5\10\2\0\12\10\1\0\3\10\1\0\3\10\2\0\1\10\17\0"+
    "\4\10\2\0\12\10\1\0\1\10\17\0\3\10\1\0\10\10\2\0"+
    "\2\10\2\0\26\10\1\0\7\10\1\0\2\10\1\0\5\10\2\0"+
    "\11\10\2\0\2\10\2\0\3\10\10\0\2\10\4\0\2\10\1\0"+
    "\5\10\2\0\12\10\1\0\1\10\20\0\2\10\1\0\6\10\3\0"+
    "\3\10\1\0\4\10\3\0\2\10\1\0\1\10\1\0\2\10\3\0"+
    "\2\10\3\0\3\10\3\0\14\10\4\0\5\10\3\0\3\10\1\0"+
    "\4\10\2\0\1\10\6\0\1\10\16\0\12\10\11\0\1\10\7\0"+
    "\3\10\1\0\10\10\1\0\3\10\1\0\27\10\1\0\12\10\1\0"+
    "\5\10\3\0\10\10\1\0\3\10\1\0\4\10\7\0\2\10\1\0"+
    "\2\10\6\0\4\10\2\0\12\10\22\0\2\10\1\0\10\10\1\0"+
    "\3\10\1\0\27\10\1\0\12\10\1\0\5\10\2\0\11\10\1\0"+
    "\3\10\1\0\4\10\7\0\2\10\7\0\1\10\1\0\4\10\2\0"+
    "\12\10\1\0\2\10\17\0\2\10\1\0\10\10\1\0\3\10\1\0"+
    "\51\10\2\0\10\10\1\0\3\10\1\0\5\10\10\0\1\10\10\0"+
    "\4\10\2\0\12\10\12\0\6\10\2\0\2\10\1\0\22\10\3\0"+
    "\30\10\1\0\11\10\1\0\1\10\2\0\7\10\3\0\1\10\4\0"+
    "\6\10\1\0\1\10\1\0\10\10\22\0\2\10\15\0\72\10\4\0"+
    "\20\10\1\0\12\10\47\0\2\10\1\0\1\10\2\0\2\10\1\0"+
    "\1\10\2\0\1\10\6\0\4\10\1\0\7\10\1\0\3\10\1\0"+
    "\1\10\1\0\1\10\2\0\2\10\1\0\15\10\1\0\3\10\2\0"+
    "\5\10\1\0\1\10\1\0\6\10\2\0\12\10\2\0\2\10\42\0"+
    "\1\10\27\0\2\10\6\0\12\10\13\0\1\10\1\0\1\10\1\0"+
    "\1\10\4\0\12\10\1\0\44\10\4\0\24\10\1\0\22\10\1\0"+
    "\44\10\11\0\1\10\71\0\112\10\6\0\116\10\2\0\46\13\12\0"+
    "\53\10\1\0\1\10\3\0\u0149\10\1\0\4\10\2\0\7\10\1\0"+
    "\1\10\1\0\4\10\2\0\51\10\1\0\4\10\2\0\41\10\1\0"+
    "\4\10\2\0\7\10\1\0\1\10\1\0\4\10\2\0\17\10\1\0"+
    "\71\10\1\0\4\10\2\0\103\10\2\0\3\10\40\0\20\10\20\0"+
    "\125\10\14\0\u026c\10\2\0\21\10\1\0\32\10\5\0\113\10\3\0"+
    "\3\10\17\0\15\10\1\0\7\10\13\0\25\10\13\0\24\10\14\0"+
    "\15\10\1\0\3\10\1\0\2\10\14\0\124\10\3\0\1\10\3\0"+
    "\3\10\2\0\12\10\41\0\3\10\2\0\12\10\6\0\130\10\10\0"+
    "\53\10\5\0\106\10\12\0\35\10\3\0\14\10\4\0\14\10\12\0"+
    "\50\10\2\0\5\10\13\0\54\10\4\0\32\10\6\0\12\10\46\0"+
    "\34\10\4\0\77\10\1\0\35\10\2\0\13\10\6\0\12\10\15\0"+
    "\1\10\130\0\114\10\4\0\12\10\21\0\11\10\14\0\53\10\3\0"+
    "\14\10\6\0\64\10\14\0\70\10\10\0\12\10\3\0\61\10\122\0"+
    "\3\10\1\0\37\10\15\0\300\11\47\10\25\0\4\10\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\11\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\11\11\10\13\6\11\2\0\6\13"+
    "\2\0\10\11\10\13\10\11\10\13\6\11\2\0\6\13\2\0\10\11"+
    "\1\0\1\13\1\0\1\13\1\0\1\13\1\0\1\13\10\11\10\13"+
    "\16\11\2\0\10\11\10\10\10\11\10\10\10\11\10\10\5\11\1\0"+
    "\2\11\4\13\1\10\1\0\1\11\3\0\3\11\1\0\2\11\4\13"+
    "\1\10\3\0\4\11\2\0\2\11\4\13\4\0\10\11\5\13\5\0"+
    "\3\11\1\0\2\11\4\13\1\10\16\0\5\10\32\0\5\10\20\0"+
    "\2\10\23\0\1\10\13\0\5\10\5\0\6\10\1\0\1\10\15\0"+
    "\1\10\20\0\5\11\10\10\3\0\32\10\26\0\15\10\4\0\1\10"+
    "\3\0\14\10\21\0\1\13\4\0\1\13\2\0\1\11\3\13\2\11"+
    "\3\13\1\11\1\0\1\13\3\0\5\13\6\0\1\13\1\0\1\13"+
    "\1\0\1\13\1\0\4\13\1\0\1\11\4\13\1\11\4\10\1\11"+
    "\2\0\2\11\2\13\5\0\1\13\4\11\4\0\1\11\21\0\20\13"+
    "\20\11\3\10\1\13\1\11\4\10\u032d\0\32\12\32\7\u0716\0\57\13"+
    "\1\0\57\11\1\0\1\13\1\11\3\13\2\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\4\13\1\11\1\13\2\11\1\13\10\11\3\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\2\11\6\0"+
    "\1\13\1\11\1\13\1\11\3\10\16\0\46\11\12\0\66\10\11\0"+
    "\1\10\17\0\30\10\11\0\7\10\1\0\7\10\1\0\7\10\1\0"+
    "\7\10\1\0\7\10\1\0\7\10\1\0\7\10\1\0\7\10\1\0"+
    "\40\10\57\0\1\10\u01d5\0\3\10\31\0\17\10\1\0\5\10\2\0"+
    "\5\10\4\0\126\10\2\0\2\10\2\0\3\10\1\0\132\10\1\0"+
    "\4\10\5\0\51\10\3\0\136\10\21\0\33\10\65\0\20\10\u0200\0"+
    "\u19b6\10\112\0\u51cc\10\64\0\u048d\10\103\0\56\10\2\0\u010d\10\3\0"+
    "\34\10\24\0\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\2\10\14\0"+
    "\2\10\1\0\1\10\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\10\0\122\10\45\0"+
    "\11\10\2\0\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\3\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\12\11\1\13\1\11"+
    "\1\13\1\11\2\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\10\2\0\1\13\1\11\1\13\1\11\1\0\1\13"+
    "\1\11\16\0\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\120\0\1\11\55\10\20\0\1\10\7\0\64\10\14\0"+
    "\105\10\13\0\12\10\6\0\30\10\3\0\1\10\4\0\56\10\2\0"+
    "\44\10\14\0\35\10\3\0\101\10\16\0\13\10\46\0\67\10\11\0"+
    "\16\10\2\0\12\10\6\0\27\10\3\0\2\10\4\0\103\10\30\0"+
    "\3\10\43\0\6\10\2\0\6\10\2\0\6\10\11\0\7\10\1\0"+
    "\7\10\221\0\53\10\1\0\2\10\2\0\12\10\6\0\u2ba4\10\14\0"+
    "\27\10\4\0\61\10\u2104\0\u012e\10\2\0\76\10\2\0\152\10\46\0"+
    "\7\11\14\0\5\11\5\0\14\10\1\0\15\10\1\0\5\10\1\0"+
    "\1\10\1\0\2\10\1\0\2\10\1\0\154\10\41\0\u016b\10\22\0"+
    "\100\10\2\0\66\10\50\0\15\10\3\0\20\10\20\0\7\10\14\0"+
    "\2\10\30\0\3\10\31\0\1\10\6\0\5\10\1\0\207\10\2\0"+
    "\1\10\4\0\1\10\13\0\12\10\7\0\32\13\4\0\1\10\1\0"+
    "\32\11\13\0\131\10\3\0\6\10\2\0\6\10\2\0\6\10\2\0"+
    "\3\10\3\0\2\10\3\0\2\10\22\0\3\10\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\3\1\4\1\5\1\6\2\7"+
    "\14\5\1\1\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\2\1"+
    "\1\25\1\26\1\27\1\30\1\31\4\32\1\33\1\34"+
    "\2\0\1\35\13\5\1\36\6\5\3\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\0\11\5\1\54\1\5\1\55\13\5"+
    "\1\56\1\5\1\57\1\60\1\61\1\62\5\5\1\63"+
    "\6\5\1\64\1\5\1\65\1\66\1\5\1\67\1\70"+
    "\1\71\2\5\1\72\1\5\1\73\1\74\1\75";

  private static int [] zzUnpackAction() {
    int [] result = new int[143];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\166\0\354\0\166\0\u0127"+
    "\0\u0162\0\u019d\0\u01d8\0\u0213\0\u024e\0\u0289\0\u02c4\0\u02ff"+
    "\0\u033a\0\u0375\0\u03b0\0\u03eb\0\u0426\0\u0461\0\u049c\0\u04d7"+
    "\0\166\0\166\0\166\0\166\0\166\0\166\0\166\0\u0512"+
    "\0\166\0\166\0\u054d\0\u0588\0\u05c3\0\u05fe\0\u0639\0\166"+
    "\0\166\0\166\0\166\0\u0674\0\u06af\0\166\0\u06ea\0\u0725"+
    "\0\166\0\u0760\0\u079b\0\u07d6\0\166\0\u0811\0\u084c\0\u0887"+
    "\0\u08c2\0\u08fd\0\u0938\0\u0973\0\u09ae\0\u09e9\0\u0a24\0\u0a5f"+
    "\0\u0127\0\u0a9a\0\u0ad5\0\u0b10\0\u0b4b\0\u0b86\0\u0bc1\0\u0bfc"+
    "\0\166\0\u0c37\0\166\0\166\0\166\0\166\0\166\0\166"+
    "\0\166\0\166\0\166\0\166\0\166\0\u07d6\0\u0c72\0\u0cad"+
    "\0\u0ce8\0\u0d23\0\u0d5e\0\u0d99\0\u0dd4\0\u0e0f\0\u0e4a\0\u0e85"+
    "\0\u0127\0\u0ec0\0\u0127\0\u0efb\0\u0f36\0\u0f71\0\u0fac\0\u0fe7"+
    "\0\u1022\0\u105d\0\u1098\0\u10d3\0\u110e\0\u1149\0\u0127\0\u1184"+
    "\0\u0127\0\u0127\0\u0127\0\u0127\0\u11bf\0\u11fa\0\u1235\0\u1270"+
    "\0\u12ab\0\u0127\0\u12e6\0\u1321\0\u135c\0\u1397\0\u13d2\0\u140d"+
    "\0\u0127\0\u1448\0\u0127\0\u0127\0\u1483\0\u0127\0\u0127\0\u0127"+
    "\0\u14be\0\u14f9\0\u0127\0\u1534\0\u0127\0\u0127\0\u0127";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[143];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\3\5\1\6\1\7\1\10\1\3\1\10"+
    "\2\11\1\12\1\13\1\10\1\11\1\14\1\15\1\10"+
    "\1\16\1\17\1\10\1\20\1\21\1\10\1\22\1\23"+
    "\1\10\1\24\1\25\2\10\1\26\1\27\2\10\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\10\1\11\1\3\1\54\1\55"+
    "\1\56\1\54\1\57\13\54\1\60\1\54\1\60\1\54"+
    "\1\60\1\54\2\60\5\54\1\60\1\54\1\60\2\54"+
    "\1\60\2\54\1\61\16\54\2\60\2\54\2\60\1\62"+
    "\75\0\1\5\75\0\1\63\1\64\74\0\2\10\1\0"+
    "\32\10\23\0\2\10\11\0\2\11\1\0\32\11\23\0"+
    "\2\11\15\0\30\65\24\0\2\65\15\0\2\13\65\0"+
    "\2\10\1\0\6\10\1\66\11\10\1\67\11\10\23\0"+
    "\2\10\11\0\2\10\1\0\11\10\1\70\20\10\23\0"+
    "\2\10\11\0\2\10\1\0\13\10\1\71\16\10\23\0"+
    "\2\10\11\0\2\10\1\0\6\10\1\72\3\10\1\73"+
    "\17\10\23\0\2\10\11\0\2\10\1\0\22\10\1\74"+
    "\4\10\1\75\2\10\23\0\2\10\11\0\2\10\1\0"+
    "\11\10\1\76\12\10\1\77\5\10\23\0\2\10\11\0"+
    "\2\10\1\0\14\10\1\100\10\10\1\101\4\10\23\0"+
    "\2\10\11\0\2\10\1\0\20\10\1\102\11\10\23\0"+
    "\2\10\11\0\2\10\1\0\20\10\1\103\1\10\1\104"+
    "\7\10\23\0\2\10\11\0\2\10\1\0\11\10\1\105"+
    "\20\10\23\0\2\10\11\0\2\10\1\0\7\10\1\106"+
    "\22\10\23\0\2\10\11\0\2\10\1\0\27\10\1\107"+
    "\2\10\23\0\2\10\10\0\1\110\1\0\1\110\2\0"+
    "\1\111\1\112\1\110\1\0\24\110\24\0\1\110\62\0"+
    "\1\113\72\0\1\114\72\0\1\115\72\0\1\116\74\0"+
    "\1\117\73\0\1\120\7\0\1\54\2\0\42\54\1\0"+
    "\24\54\3\0\1\56\70\0\1\54\2\0\1\54\1\57"+
    "\40\54\1\0\24\54\1\0\1\54\2\0\15\54\1\60"+
    "\1\54\1\60\1\54\1\60\1\54\2\60\5\54\1\60"+
    "\1\54\1\60\2\54\1\60\2\54\1\0\16\54\2\60"+
    "\2\54\2\60\27\0\1\121\1\122\5\0\1\123\7\0"+
    "\1\124\24\0\1\125\1\63\1\4\1\5\70\63\5\126"+
    "\1\64\1\127\64\126\10\0\2\10\1\0\7\10\1\130"+
    "\22\10\23\0\2\10\11\0\2\10\1\0\14\10\1\131"+
    "\15\10\23\0\2\10\11\0\2\10\1\0\14\10\1\132"+
    "\15\10\23\0\2\10\11\0\2\10\1\0\7\10\1\133"+
    "\12\10\1\134\7\10\23\0\2\10\11\0\2\10\1\0"+
    "\10\10\1\135\21\10\23\0\2\10\11\0\2\10\1\0"+
    "\13\10\1\136\16\10\23\0\2\10\11\0\2\10\1\0"+
    "\24\10\1\137\5\10\23\0\2\10\11\0\2\10\1\0"+
    "\16\10\1\140\13\10\23\0\2\10\11\0\2\10\1\0"+
    "\26\10\1\141\3\10\23\0\2\10\11\0\2\10\1\0"+
    "\6\10\1\142\23\10\23\0\2\10\11\0\2\10\1\0"+
    "\13\10\1\143\16\10\23\0\2\10\11\0\2\10\1\0"+
    "\16\10\1\144\13\10\23\0\2\10\11\0\2\10\1\0"+
    "\20\10\1\145\11\10\23\0\2\10\11\0\2\10\1\0"+
    "\11\10\1\146\20\10\23\0\2\10\11\0\2\10\1\0"+
    "\13\10\1\147\16\10\23\0\2\10\11\0\2\10\1\0"+
    "\6\10\1\150\23\10\23\0\2\10\11\0\2\10\1\0"+
    "\16\10\1\151\13\10\23\0\2\10\11\0\2\110\1\0"+
    "\32\110\23\0\2\110\15\0\2\112\55\0\5\64\1\5"+
    "\1\127\64\64\10\0\2\10\1\0\10\10\1\152\21\10"+
    "\23\0\2\10\11\0\2\10\1\0\13\10\1\153\16\10"+
    "\23\0\2\10\11\0\2\10\1\0\23\10\1\154\6\10"+
    "\23\0\2\10\11\0\2\10\1\0\13\10\1\155\16\10"+
    "\23\0\2\10\11\0\2\10\1\0\16\10\1\156\13\10"+
    "\23\0\2\10\11\0\2\10\1\0\11\10\1\157\20\10"+
    "\23\0\2\10\11\0\2\10\1\0\11\10\1\160\20\10"+
    "\23\0\2\10\11\0\2\10\1\0\11\10\1\161\20\10"+
    "\23\0\2\10\11\0\2\10\1\0\10\10\1\162\21\10"+
    "\23\0\2\10\11\0\2\10\1\0\6\10\1\163\23\10"+
    "\23\0\2\10\11\0\2\10\1\0\15\10\1\164\14\10"+
    "\23\0\2\10\11\0\2\10\1\0\6\10\1\165\23\10"+
    "\23\0\2\10\11\0\2\10\1\0\7\10\1\166\22\10"+
    "\23\0\2\10\11\0\2\10\1\0\24\10\1\167\5\10"+
    "\23\0\2\10\11\0\2\10\1\0\10\10\1\170\21\10"+
    "\23\0\2\10\11\0\2\10\1\0\6\10\1\171\23\10"+
    "\23\0\2\10\11\0\2\10\1\0\10\10\1\172\21\10"+
    "\23\0\2\10\11\0\2\10\1\0\16\10\1\173\13\10"+
    "\23\0\2\10\11\0\2\10\1\0\13\10\1\174\16\10"+
    "\23\0\2\10\11\0\2\10\1\0\16\10\1\175\13\10"+
    "\23\0\2\10\11\0\2\10\1\0\14\10\1\176\15\10"+
    "\23\0\2\10\11\0\2\10\1\0\14\10\1\177\15\10"+
    "\23\0\2\10\11\0\2\10\1\0\11\10\1\200\20\10"+
    "\23\0\2\10\11\0\2\10\1\0\30\10\1\201\1\10"+
    "\23\0\2\10\11\0\2\10\1\0\22\10\1\202\7\10"+
    "\23\0\2\10\11\0\2\10\1\0\11\10\1\203\20\10"+
    "\23\0\2\10\11\0\2\10\1\0\11\10\1\204\20\10"+
    "\23\0\2\10\11\0\2\10\1\0\14\10\1\205\15\10"+
    "\23\0\2\10\11\0\2\10\1\0\27\10\1\206\2\10"+
    "\23\0\2\10\11\0\2\10\1\0\5\10\1\207\24\10"+
    "\23\0\2\10\11\0\2\10\1\0\23\10\1\210\6\10"+
    "\23\0\2\10\11\0\2\10\1\0\15\10\1\211\14\10"+
    "\23\0\2\10\11\0\2\10\1\0\7\10\1\212\22\10"+
    "\23\0\2\10\11\0\2\10\1\0\14\10\1\213\15\10"+
    "\23\0\2\10\11\0\2\10\1\0\24\10\1\214\5\10"+
    "\23\0\2\10\11\0\2\10\1\0\10\10\1\215\21\10"+
    "\23\0\2\10\11\0\2\10\1\0\14\10\1\216\15\10"+
    "\23\0\2\10\11\0\2\10\1\0\11\10\1\217\20\10"+
    "\23\0\2\10\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5487];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\1\11\1\1\1\11\21\1\7\11"+
    "\1\1\2\11\5\1\4\11\2\1\1\11\2\1\1\11"+
    "\1\1\2\0\1\11\23\1\1\11\1\1\13\11\1\1"+
    "\1\0\70\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[143];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

int string_column = 0, string_line = 0;

StringBuffer string = new StringBuffer();

Token tok(String tag) { 
	return new Token(tag, yytext(), yyline + 1, yycolumn + 1);
}

Token tok(String tag, String value) { 
	if (tag == "STRING") {
		return new Token(tag, value, yyline + 1, yycolumn + 2 - value.length());
	}
	else if (tag == "STRING_ERROR") {
		return new Token(tag, value, string_line, string_column);
	}
	return new Token(tag, value, yyline + 1, yycolumn + 1);
}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Scanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 4136) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 2: 
          { /* ignore */
          }
        case 62: break;
        case 23: 
          { return tok(";");
          }
        case 63: break;
        case 26: 
          { yybegin(YYINITIAL);
  							       return tok("STRING_ERROR","malformed string literal");
          }
        case 64: break;
        case 4: 
          { return tok("*");
          }
        case 65: break;
        case 3: 
          { return tok("/");
          }
        case 66: break;
        case 29: 
          { return tok("ERROR","an identifier cannot start with an integer ");
          }
        case 67: break;
        case 50: 
          { return tok("void");
          }
        case 68: break;
        case 22: 
          { return tok("}");
          }
        case 69: break;
        case 34: 
          { return tok("==");
          }
        case 70: break;
        case 9: 
          { return tok("[");
          }
        case 71: break;
        case 54: 
          { return tok("while");
          }
        case 72: break;
        case 46: 
          { return tok("else");
          }
        case 73: break;
        case 57: 
          { return tok("string");
          }
        case 74: break;
        case 11: 
          { return tok("(");
          }
        case 75: break;
        case 20: 
          { return tok(">");
          }
        case 76: break;
        case 14: 
          { return tok("-");
          }
        case 77: break;
        case 28: 
          { string.append("\\");
          }
        case 78: break;
        case 21: 
          { return tok("{");
          }
        case 79: break;
        case 51: 
          { return tok("class");
          }
        case 80: break;
        case 38: 
          { string.append("\\t");
          }
        case 81: break;
        case 15: 
          { return tok("!");
          }
        case 82: break;
        case 45: 
          { return tok("int");
          }
        case 83: break;
        case 27: 
          { yybegin(YYINITIAL);
                                   return tok("STRING", "\"" + string.toString() + "\"");
          }
        case 84: break;
        case 59: 
          { return tok("extends");
          }
        case 85: break;
        case 33: 
          { return tok("<=");
          }
        case 86: break;
        case 18: 
          { return tok("<");
          }
        case 87: break;
        case 53: 
          { return tok("false");
          }
        case 88: break;
        case 17: 
          { return tok("+");
          }
        case 89: break;
        case 1: 
          { return tok("ERROR","invalid character '" + yytext() + "'");
          }
        case 90: break;
        case 43: 
          { return tok("ERROR","unterminated comment");
          }
        case 91: break;
        case 31: 
          { return tok("ERROR","an identifier cannot start with '_'");
          }
        case 92: break;
        case 40: 
          { string.append("\\r");
          }
        case 93: break;
        case 56: 
          { return tok("static");
          }
        case 94: break;
        case 42: 
          { string.append("\\\\");
          }
        case 95: break;
        case 58: 
          { return tok("return");
          }
        case 96: break;
        case 44: 
          { return tok("new");
          }
        case 97: break;
        case 12: 
          { return tok(")");
          }
        case 98: break;
        case 48: 
          { return tok("this");
          }
        case 99: break;
        case 49: 
          { return tok("null");
          }
        case 100: break;
        case 6: 
          { return tok("CLASS_ID");
          }
        case 101: break;
        case 60: 
          { return tok("boolean");
          }
        case 102: break;
        case 13: 
          { return tok(".");
          }
        case 103: break;
        case 5: 
          { return tok("ID");
          }
        case 104: break;
        case 37: 
          { return tok("||");
          }
        case 105: break;
        case 41: 
          { string.append("\\\"");
          }
        case 106: break;
        case 55: 
          { return tok("length");
          }
        case 107: break;
        case 8: 
          { string.setLength(0);
  								   yybegin(STRING);
  								   string_column = yycolumn + 1;
  								   string_line = yyline + 1;
          }
        case 108: break;
        case 32: 
          { return tok("!=");
          }
        case 109: break;
        case 47: 
          { return tok("true");
          }
        case 110: break;
        case 19: 
          { return tok("=");
          }
        case 111: break;
        case 24: 
          { return tok(",");
          }
        case 112: break;
        case 35: 
          { return tok(">=");
          }
        case 113: break;
        case 39: 
          { string.append("\\n");
          }
        case 114: break;
        case 7: 
          { return tok("INTEGER");
          }
        case 115: break;
        case 30: 
          { return tok("if");
          }
        case 116: break;
        case 25: 
          { string.append( yytext() );
          }
        case 117: break;
        case 61: 
          { return tok("continue");
          }
        case 118: break;
        case 52: 
          { return tok("break");
          }
        case 119: break;
        case 10: 
          { return tok("]");
          }
        case 120: break;
        case 36: 
          { return tok("&&");
          }
        case 121: break;
        case 16: 
          { return tok("%");
          }
        case 122: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
